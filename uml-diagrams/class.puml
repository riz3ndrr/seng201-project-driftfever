@startuml




Class Purchasable {
-itemID: int
-name: String
-desc: String
-buyingPrice: float
-sellingPrice: float
-isPurchased: boolean

}

Class Car {
-speedKilometresPerHour: double
-fuelConsumptionLitresPerKilometer: double
-fuelTankCapacityLitres: double
-fuelTankInLitres: double
-handlingScaleFactor: double
-reliabilityScaleFactor: double
-equippedUpgrades: List<Upgrade>

+makeCopy() : Car
+addUpgrade() : void
+removeUpgrade() : void
+clearUpgradeCollection() : void
+checkIfUpgradeEquipped() : boolean
+costToFillTank() : double


}

Class Upgrade {
-speedMultiplier : double
-handlingMultiplier : double
-reliabilityMultiplier : double
-fuelConsumptionMultiplier : double
-fuelTankCapacityMultiplier : double
-numPurchased : int

+displayForMultiplier() : String


}

Purchasable ---|> Upgrade
Purchasable ---|> Car

class GameStats {
    -selectedRace : Race
    -raceCount : int
    -racesDone : int = 0
    -difficulty : Difficulty
    -userName : String
    -bal : double
    -prizeMoneyWon : double
    -fuelCostPerLitre : double
    -minimumSecondsForGasStop : double
    -secondsToPumpLitreOfGas : double
    -numOpponents : int
    -opponentUpgradeProbability : double
    -opponentRefuelProbability : double
    +selectedCar : Car
    -carCollection : List<Car>
    -upgradeCollection : List<Upgrade>

    +calculateAdjustedWinnings() : double
    +clearCarCollection() : void
    +clearUpgradeCollection() : void
    +selectedItemInCollection() : boolean
    +addItem() : void
    +removeItem() : void
}

enum Difficulty {
    EASY
    REGULAR
    HARD
}

GameStats "1" --> "0.." Race : selectedRace
GameStats "1" --> "1" Car : selectedCar
GameStats "1" *-- "0..*" Car : carCollection
GameStats "1" *-- "0..*" Upgrade : upgradeCollection
GameStats ..> Purchasable : uses


GameStats ..> Difficulty

class Race {
    -name : String
    -desc : String
    -distanceKilometers : float
    -curvinessScaleFactor : double
    -gasStopDistances : List<Double>
    -prizeMoney : float
    -timeLimitHours : int
    -participants : List<RaceParticipant>
    -commentary : RaceCommentary

    +getListOfFuelStopDistances() : List<Double>
    +isGasStopWithinBounds() : boolean
    +addParticipant() : void
    +clearParticipants() : void
}

class RaceParticipant {
    -car : Car
    -driverName : String
    -entryNumber : int
    -isPlayer : boolean
    -distanceTraveledKilometers : double
    -isBrokenDown : boolean
    -secondsPaused : double
    -route: RaceRoute

}

class RaceComment {
    -participant : RaceParticipant
    -message : String

    +createUI() : HBox
}

enum RaceRoute{
    MOUNTAIN_ROUTE
    DIRT_ROUTE
    SCENIC_ROUTE
    HIGHWAY_ROUTE

    +getRandomRoute() : RaceRoute
}

RaceRoute "1" <.. "1" RaceParticipant

'change add to addComment later
class RaceCommentary {
    -comments : List<RaceComment>

    +addComment() : void
    +getCommentsForParticipant() : List<RaceComment>
}

RaceCommentary --> "0..*" RaceComment
RaceCommentary --> RaceParticipant


RaceParticipant "1" --> "1" Car
RaceParticipant --> "*" RaceComment


Race --> "1" RaceCommentary
Race --* RaceParticipant



class GarageService {
    +payableCostToFillTank() : double
    +fillTank() : void
    +updateSelectedCar() : void
    +equipUpgrade() : EquipResult
    +unequipUpgrade() : UnequipResult
}

enum UnequipResult {
    UPGRADE_NOT_SELECTED
    SUCCESS
}

enum EquipResult {
    UPGRADE_NOT_SELECTED
    SUCCESS
    UPGRADE_ALREADY_EQUIPPED
}


GarageService ..> GameStats
GarageService ..> UnequipResult
GarageService ..> EquipResult

class ShopService {
    +buyItem() : PurchaseResult
    +sellItem() : SellResult
}

enum PurchaseResult {
    SUCCESS
    ALREADY_OWNED
    INSUFFICIENT_FUNDS
}

enum SellResult {
    SUCCESS
    ITEM_NOT_OWNED
    LAST_CAR_OWNED
}

ShopService ..> SellResult
ShopService ..> PurchaseResult



ShopService ..> GameStats
ShopService ..> Purchasable
ShopService ..> Car
ShopService ..> Upgrade
GarageService ..> Car
GarageService ..> Upgrade


GameStats ..> SimulatorService


class SimulatorService {
    +prepareRace(): void
    -generateEntryNumberForOpponent(): int
    -generateOpponentName(): String
    +generateOpponents(): void
    +generateRandomCar(): Car


}






@enduml